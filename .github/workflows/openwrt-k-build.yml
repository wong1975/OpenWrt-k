name: OpenWrt-K Config Build

on:
  push:
    branches:
      - main
      # 您可以根据需要添加其他分支，例如：
      # - 'develop'
  pull_request:
    branches:
      - main
      # - 'develop'
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    # 建议使用 ubuntu-latest 以获得更好的兼容性和最新的安全更新。
    # GitHub Actions 当前的 ubuntu-latest 通常指向最新的 LTS 版本（如 Ubuntu 22.04）。
    # 如果您确实需要 Ubuntu 24.04，请确认其在 GitHub Actions 上的可用性和稳定性，
    # 然后可以将 `runs-on: ubuntu-latest` 修改为 `runs-on: ubuntu-24.04`。
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            git \
            libncurses5-dev \
            libssl-dev \
            python3-setuptools \
            rsync \
            swig \
            unzip \
            zlib1g-dev \
            file \
            wget \
            curl # curl 用于下一步下载脚本

      - name: Download and prepare config_build_tool.sh
        run: |
          curl -L -O https://raw.githubusercontent.com/chenmozhijin/OpenWrt-K/main/config_build_tool.sh
          chmod +x config_build_tool.sh
          echo "Downloaded and made config_build_tool.sh executable."

      # 关于 "上传配置文件":
      # 如果您的构建需要一个特定的 OpenWrt .config 文件，您需要确保此文件在运行构建脚本之前位于正确的位置。
      # 方案1: 将 .config 文件放在仓库中，并在运行脚本前复制它。
      #   例如，如果您的配置文件名为 `my_ax3600.config` 并且脚本期望它在 `openwrt/.config`:
      #   - name: Prepare OpenWrt .config
      #     run: |
      #       mkdir -p openwrt # 确保 openwrt 目录存在
      #       cp path/to/your/my_ax3600.config openwrt/.config
      # 方案2: 构建脚本 `config_build_tool.sh` 可能有自己的方式来处理或生成配置文件。
      # 请根据 `config_build_tool.sh` 的实际行为调整。

      - name: Run config_build_tool.sh
        run: ./config_build_tool.sh
        # 如果脚本需要特定的环境变量或参数，请在此处添加，例如：
        # env:
        #   MY_VARIABLE: value

      # 关于 "上传构建产物":
      # OpenWrt 构建过程通常会将固件镜像输出到 `openwrt/bin/targets/...` 目录，
      # 软件包输出到 `openwrt/bin/packages/...` 目录。
      # 请根据 `config_build_tool.sh` 脚本的实际输出路径调整下面的 `path` 参数。
      - name: Upload Firmware Artifacts
        if: success() # 仅在构建成功时上传
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ github.run_id }}-${{ github.sha }}
          path: |
            openwrt/bin/targets/
            openwrt/bin/packages/
            # 您可能还需要上传 .config 文件以供参考
            # openwrt/.config 
          retention-days: 7 # 设置产物保留天数，默认为90天

      # 关于 "ssh 远程连接" (用于调试):
      # 如果构建失败，您可能希望通过 SSH 连接到运行器进行调试。
      # 可以使用如 `mxschmitt/action-tmate@v3` 这样的 Action。
      # 取消下面的注释以启用此功能 (仅在失败时触发):
      # - name: Setup tmate session for SSH debugging
      #   if: failure()
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true # 限制只有触发工作流的用户可以访问